#!/usr/bin/env python3
"""
Tests automatis√©s pour le simulateur SecureIoT-VIF
"""

import unittest
import subprocess
import os
import re
import time
import tempfile
from pathlib import Path

class SecureIoTVIFSimulatorTests(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale des tests"""
        cls.project_dir = Path("/app/SecureIoT-VIF")
        cls.simulator_path = cls.project_dir / "build" / "simulator"
        cls.run_simulator_script = cls.project_dir / "run_simulator.sh"
        cls.generate_demo_script = cls.project_dir / "generate_demo.sh"
        
    def test_01_simulator_compilation(self):
        """Test de compilation du simulateur"""
        print("\nüß™ Test de compilation du simulateur...")
        
        # Supprimer le simulateur existant pour forcer la recompilation
        if self.simulator_path.exists():
            os.remove(self.simulator_path)
        
        # Ex√©cuter le script de compilation
        result = subprocess.run(
            ["bash", str(self.run_simulator_script)],
            capture_output=True,
            text=True
        )
        
        # V√©rifier que la compilation a r√©ussi
        self.assertEqual(result.returncode, 0, f"Erreur de compilation: {result.stderr}")
        self.assertIn("Compilation r√©ussie", result.stdout)
        
        # V√©rifier que le simulateur existe
        self.assertTrue(self.simulator_path.exists(), "Le simulateur n'a pas √©t√© cr√©√©")
        self.assertTrue(os.access(self.simulator_path, os.X_OK), "Le simulateur n'est pas ex√©cutable")
        
        print("‚úÖ Compilation du simulateur r√©ussie")
    
    def test_02_simulator_execution(self):
        """Test d'ex√©cution du simulateur"""
        print("\nüß™ Test d'ex√©cution du simulateur...")
        
        # V√©rifier que le simulateur existe
        self.assertTrue(self.simulator_path.exists(), "Le simulateur n'existe pas")
        
        # Ex√©cuter le simulateur
        result = subprocess.run(
            [str(self.simulator_path)],
            capture_output=True,
            text=True,
            timeout=60  # 60 secondes max
        )
        
        # V√©rifier que l'ex√©cution a r√©ussi
        self.assertEqual(result.returncode, 0, f"Erreur d'ex√©cution: {result.stderr}")
        
        # V√©rifier les messages cl√©s
        self.assertIn("SecureIoT-VIF Framework Simulator", result.stdout)
        self.assertIn("Initialisation du syst√®me de s√©curit√©", result.stdout)
        self.assertIn("Syst√®me initialis√© avec succ√®s", result.stdout)
        self.assertIn("Tests de fonctionnement", result.stdout)
        self.assertIn("Simulation temps r√©el", result.stdout)
        self.assertIn("Statistiques de performance", result.stdout)
        self.assertIn("D√©monstration SecureIoT-VIF termin√©e avec succ√®s", result.stdout)
        
        print("‚úÖ Ex√©cution du simulateur r√©ussie")
        return result.stdout
    
    def test_03_logs_coherence(self):
        """Test de coh√©rence des logs"""
        print("\nüß™ Test de coh√©rence des logs...")
        
        # Obtenir les logs d'ex√©cution
        simulator_output = self.test_02_simulator_execution()
        
        # V√©rifier la s√©quence d'initialisation
        init_sequence = [
            "Initialisation du gestionnaire crypto ESP32",
            "Gestionnaire crypto ESP32 initialis√© avec succ√®s",
            "Initialisation du v√©rificateur d'int√©grit√©",
            "V√©rificateur d'int√©grit√© initialis√©",
            "Initialisation gestionnaire d'attestation",
            "Initialisation gestionnaire de capteurs",
            "Initialisation d√©tecteur d'anomalies",
            "Initialisation gestionnaire d'incidents",
            "SecureIoT-VIF initialis√© avec succ√®s"
        ]
        
        for message in init_sequence:
            self.assertIn(message, simulator_output, f"Message manquant: {message}")
        
        # V√©rifier les tests de fonctionnement
        test_sequence = [
            "Testing ESP32 Crypto",
            "Auto-test crypto ESP32: Succ√®s",
            "Testing Firmware Integrity Verification",
            "V√©rification int√©grit√©: OK",
            "Testing Continuous Attestation",
            "Attestation continue: Succ√®s",
            "Tests de base r√©ussis"
        ]
        
        for message in test_sequence:
            self.assertIn(message, simulator_output, f"Message manquant: {message}")
        
        # V√©rifier la simulation temps r√©el
        self.assertRegex(simulator_output, r"Cycle \d+: T=\d+\.\d+¬∞C, H=\d+\.\d+%")
        
        # V√©rifier les statistiques finales
        stats_sequence = [
            "Statistiques de performance",
            "Dur√©e simulation:",
            "Cycles d'ex√©cution:",
            "Lectures capteurs:",
            "V√©rifications int√©grit√©:",
            "Attestations:",
            "√âtat syst√®me:               ‚úÖ S√âCURIS√â"
        ]
        
        for message in stats_sequence:
            self.assertIn(message, simulator_output, f"Message manquant: {message}")
        
        print("‚úÖ Logs coh√©rents et complets")
    
    def test_04_demo_generation(self):
        """Test de g√©n√©ration de d√©mo"""
        print("\nüß™ Test de g√©n√©ration de d√©mo...")
        
        # Ex√©cuter le script de g√©n√©ration de d√©mo
        result = subprocess.run(
            ["bash", str(self.generate_demo_script)],
            capture_output=True,
            text=True,
            timeout=120  # 120 secondes max
        )
        
        # V√©rifier que la g√©n√©ration a r√©ussi
        self.assertEqual(result.returncode, 0, f"Erreur de g√©n√©ration: {result.stderr}")
        self.assertIn("D√©mo compl√®te g√©n√©r√©e avec succ√®s", result.stdout)
        
        # V√©rifier que les fichiers de d√©mo existent
        demo_dir = self.project_dir / "demo"
        self.assertTrue(demo_dir.exists(), "R√©pertoire demo non cr√©√©")
        
        # V√©rifier le fichier de log de d√©mo
        demo_logs = list(demo_dir.glob("secureiot_vif_demo_*.log"))
        self.assertTrue(len(demo_logs) > 0, "Aucun fichier de log de d√©mo trouv√©")
        
        # V√©rifier le script de lecture
        play_script = demo_dir / "play_demo.sh"
        self.assertTrue(play_script.exists(), "Script de lecture non cr√©√©")
        self.assertTrue(os.access(play_script, os.X_OK), "Script de lecture non ex√©cutable")
        
        # V√©rifier le r√©sum√©
        summary_file = demo_dir / "DEMO_SUMMARY.md"
        self.assertTrue(summary_file.exists(), "Fichier de r√©sum√© non cr√©√©")
        
        # Lire le contenu du r√©sum√©
        with open(summary_file, 'r') as f:
            summary_content = f.read()
        
        # V√©rifier le contenu du r√©sum√©
        self.assertIn("D√©monstration SecureIoT-VIF", summary_content)
        self.assertIn("Phases de D√©monstration", summary_content)
        self.assertIn("Innovations D√©montr√©es", summary_content)
        self.assertIn("M√©triques Performance", summary_content)
        
        print("‚úÖ G√©n√©ration de d√©mo r√©ussie")
    
    def test_05_simulated_components(self):
        """Test des composants simul√©s"""
        print("\nüß™ Test des composants simul√©s...")
        
        # Obtenir les logs d'ex√©cution
        simulator_output = self.test_02_simulator_execution()
        
        # Tester le crypto ESP32
        crypto_patterns = [
            r"Initialisation du gestionnaire crypto ESP32",
            r"Auto-test crypto ESP32 r√©ussi",
            r"Gestionnaire crypto ESP32 initialis√© avec succ√®s",
            r"Device ID: [0-9A-F:]+, Chip Revision: \d+"
        ]
        
        for pattern in crypto_patterns:
            self.assertRegex(simulator_output, pattern, f"Pattern crypto manquant: {pattern}")
        
        # Tester la v√©rification d'int√©grit√©
        integrity_patterns = [
            r"Initialisation du v√©rificateur d'int√©grit√©",
            r"Firmware: \d+ bytes, \d+ chunks",
            r"D√©marrage v√©rification compl√®te du firmware",
            r"V√©rification compl√®te termin√©e: OK \(\d+ ms\)",
            r"Chunks: \d+ total, \d+ v√©rifi√©s, \d+ corrompus"
        ]
        
        for pattern in integrity_patterns:
            self.assertRegex(simulator_output, pattern, f"Pattern int√©grit√© manquant: {pattern}")
        
        # Tester les capteurs
        sensor_patterns = [
            r"Initialisation gestionnaire de capteurs",
            r"Configuration DHT22 sur GPIO \d+",
            r"Lecture capteur: T=\d+\.\d+¬∞C, H=\d+\.\d+%, Q=\d+"
        ]
        
        for pattern in sensor_patterns:
            self.assertRegex(simulator_output, pattern, f"Pattern capteur manquant: {pattern}")
        
        # Tester l'attestation
        attestation_patterns = [
            r"Initialisation gestionnaire d'attestation",
            r"Attestation continue r√©ussie"
        ]
        
        for pattern in attestation_patterns:
            self.assertRegex(simulator_output, pattern, f"Pattern attestation manquant: {pattern}")
        
        # Tester la d√©tection d'anomalies
        anomaly_patterns = [
            r"Initialisation d√©tecteur d'anomalies"
        ]
        
        for pattern in anomaly_patterns:
            self.assertRegex(simulator_output, pattern, f"Pattern anomalie manquant: {pattern}")
        
        print("‚úÖ Tous les composants simul√©s fonctionnent correctement")
    
    def test_06_performance_metrics(self):
        """Test des m√©triques de performance"""
        print("\nüß™ Test des m√©triques de performance...")
        
        # Obtenir les logs d'ex√©cution
        simulator_output = self.test_02_simulator_execution()
        
        # Extraire les m√©triques de performance
        integrity_time_match = re.search(r"V√©rification compl√®te termin√©e: OK \((\d+) ms\)", simulator_output)
        self.assertIsNotNone(integrity_time_match, "Temps de v√©rification d'int√©grit√© non trouv√©")
        
        integrity_time = int(integrity_time_match.group(1))
        self.assertLessEqual(integrity_time, 200, f"Temps de v√©rification d'int√©grit√© trop long: {integrity_time}ms > 200ms")
        
        # Extraire les statistiques finales
        cycles_match = re.search(r"Cycles d'ex√©cution:\s+(\d+)", simulator_output)
        self.assertIsNotNone(cycles_match, "Nombre de cycles non trouv√©")
        
        cycles = int(cycles_match.group(1))
        self.assertGreaterEqual(cycles, 25, f"Nombre de cycles insuffisant: {cycles} < 25")
        
        # V√©rifier les m√©triques dans le rapport final
        metrics_patterns = [
            r"Dur√©e simulation:\s+\d+ secondes",
            r"Cycles d'ex√©cution:\s+\d+",
            r"Lectures capteurs:\s+\d+",
            r"V√©rifications int√©grit√©:\s+\d+",
            r"Attestations:\s+\d+"
        ]
        
        for pattern in metrics_patterns:
            self.assertRegex(simulator_output, pattern, f"M√©trique manquante: {pattern}")
        
        print("‚úÖ M√©triques de performance valid√©es")
    
    def test_07_project_structure(self):
        """Test de la structure du projet"""
        print("\nüß™ Test de la structure du projet...")
        
        # V√©rifier les r√©pertoires principaux
        main_dirs = [
            "main",
            "components",
            "simulator",
            "tests",
            "docs",
            "build",
            "demo"
        ]
        
        for dir_name in main_dirs:
            dir_path = self.project_dir / dir_name
            self.assertTrue(dir_path.exists(), f"R√©pertoire {dir_name} manquant")
        
        # V√©rifier les composants
        component_dirs = [
            "secure_element",
            "firmware_verification",
            "attestation",
            "sensor_interface",
            "security_monitor"
        ]
        
        for dir_name in component_dirs:
            dir_path = self.project_dir / "components" / dir_name
            self.assertTrue(dir_path.exists(), f"Composant {dir_name} manquant")
        
        # V√©rifier les fichiers principaux
        main_files = [
            "run_simulator.sh",
            "generate_demo.sh",
            "ANALYSE_RAPPORT.md",
            "simulator/simulator.c"
        ]
        
        for file_name in main_files:
            file_path = self.project_dir / file_name
            self.assertTrue(file_path.exists(), f"Fichier {file_name} manquant")
        
        print("‚úÖ Structure du projet valid√©e")

def run_all_tests():
    """Ex√©cute tous les tests"""
    print("\nüöÄ D√©marrage des tests du simulateur SecureIoT-VIF")
    print("=" * 60)
    
    # Cr√©er la suite de tests
    test_suite = unittest.TestLoader().loadTestsFromTestCase(SecureIoTVIFSimulatorTests)
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # R√©sum√©
    print("=" * 60)
    if result.wasSuccessful():
        print("‚úÖ Tous les tests sont pass√©s avec succ√®s!")
    else:
        print(f"‚ùå {len(result.failures)} tests √©chou√©s, {len(result.errors)} erreurs")
        
        for test, error in result.failures + result.errors:
            print(f"‚ùå {test}: {error}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)
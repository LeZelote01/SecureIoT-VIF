#!/usr/bin/env python3
"""
Tests automatis√©s de s√©curit√© pour SecureIoT-VIF
"""

import unittest
import serial
import time
import re
import json
from pathlib import Path

class SecureIoTVIFTests(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale des tests"""
        cls.serial_port = "/dev/ttyUSB0"  # √Ä adapter selon votre configuration
        cls.baudrate = 115200
        cls.timeout = 30
        
    def setUp(self):
        """Configuration avant chaque test"""
        try:
            self.ser = serial.Serial(self.serial_port, self.baudrate, timeout=self.timeout)
            time.sleep(2)  # Attendre stabilisation
        except serial.SerialException:
            self.skipTest(f"Port s√©rie {self.serial_port} non disponible")
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        if hasattr(self, 'ser'):
            self.ser.close()
    
    def read_serial_until_pattern(self, pattern, timeout=10):
        """Lit le port s√©rie jusqu'√† trouver un pattern"""
        start_time = time.time()
        buffer = ""
        
        while time.time() - start_time < timeout:
            if self.ser.in_waiting:
                data = self.ser.read(self.ser.in_waiting).decode('utf-8', errors='ignore')
                buffer += data
                
                if re.search(pattern, buffer, re.MULTILINE):
                    return buffer
        
        return buffer
    
    def test_boot_sequence(self):
        """Test de la s√©quence de d√©marrage s√©curis√©"""
        print("üß™ Test s√©quence de d√©marrage...")
        
        # Red√©marrer l'ESP32
        self.ser.setDTR(False)
        time.sleep(0.1)
        self.ser.setDTR(True)
        
        # Attendre les messages de d√©marrage
        boot_log = self.read_serial_until_pattern(r"=== SecureIoT-VIF initialis√© avec succ√®s ===", timeout=30)
        
        # V√©rifications
        self.assertIn("D√©marrage SecureIoT-VIF", boot_log)
        self.assertIn("Gestionnaire SE initialis√© avec succ√®s", boot_log)
        self.assertIn("V√©rificateur d'int√©grit√© initialis√©", boot_log)
        self.assertIn("Gestionnaire d'attestation initialis√©", boot_log)
        
        print("‚úÖ S√©quence de d√©marrage OK")
    
    def test_secure_element_initialization(self):
        """Test d'initialisation de l'√©l√©ment s√©curis√©"""
        print("üß™ Test initialisation √©l√©ment s√©curis√©...")
        
        boot_log = self.read_serial_until_pattern(r"Auto-test r√©ussi", timeout=20)
        
        # V√©rifications ATECC608A
        self.assertIn("Initialisation du gestionnaire d'√©l√©ment s√©curis√©", boot_log)
        self.assertIn("Serial=0x", boot_log)  # Num√©ro de s√©rie
        self.assertIn("Rev=0x", boot_log)     # R√©vision
        self.assertIn("Auto-test r√©ussi", boot_log)
        
        print("‚úÖ √âl√©ment s√©curis√© OK")
    
    def test_integrity_verification(self):
        """Test de v√©rification d'int√©grit√©"""
        print("üß™ Test v√©rification d'int√©grit√©...")
        
        # Attendre une v√©rification d'int√©grit√©
        integrity_log = self.read_serial_until_pattern(r"V√©rification compl√®te termin√©e", timeout=90)
        
        # V√©rifications
        self.assertIn("D√©marrage v√©rification compl√®te du firmware", integrity_log)
        self.assertIn("V√©rification compl√®te termin√©e: OK", integrity_log)
        
        # Extraire les statistiques
        chunks_match = re.search(r"Chunks: (\d+) total, (\d+) v√©rifi√©s, (\d+) corrompus", integrity_log)
        if chunks_match:
            total, verified, corrupted = chunks_match.groups()
            self.assertEqual(total, verified, "Tous les chunks doivent √™tre v√©rifi√©s")
            self.assertEqual(corrupted, "0", "Aucune corruption ne doit √™tre d√©tect√©e")
        
        print("‚úÖ V√©rification d'int√©grit√© OK")
    
    def test_attestation_continuous(self):
        """Test d'attestation continue"""
        print("üß™ Test attestation continue...")
        
        # Attendre une attestation
        attestation_log = self.read_serial_until_pattern(r"Attestation continue r√©ussie", timeout=60)
        
        # V√©rifications
        self.assertIn("Ex√©cution attestation continue", attestation_log)
        self.assertIn("Attestation continue r√©ussie", attestation_log)
        
        print("‚úÖ Attestation continue OK")
    
    def test_sensor_reading(self):
        """Test de lecture des capteurs"""
        print("üß™ Test lecture capteurs...")
        
        # Attendre une lecture de capteur
        sensor_log = self.read_serial_until_pattern(r"Lecture capteur:", timeout=30)
        
        # V√©rifications
        self.assertIn("Lecture capteur:", sensor_log)
        
        # Extraire les valeurs
        reading_match = re.search(r"T=([\d.-]+)¬∞C, H=([\d.-]+)%, Q=(\d+)", sensor_log)
        if reading_match:
            temp, humidity, quality = reading_match.groups()
            temp = float(temp)
            humidity = float(humidity)
            quality = int(quality)
            
            # V√©rifier les plages valides
            self.assertGreaterEqual(temp, -40.0, "Temp√©rature dans la plage DHT22")
            self.assertLessEqual(temp, 80.0, "Temp√©rature dans la plage DHT22")
            self.assertGreaterEqual(humidity, 0.0, "Humidit√© dans la plage DHT22")
            self.assertLessEqual(humidity, 100.0, "Humidit√© dans la plage DHT22")
            self.assertGreaterEqual(quality, 0, "Score de qualit√© valide")
            self.assertLessEqual(quality, 100, "Score de qualit√© valide")
        
        print("‚úÖ Lecture capteurs OK")
    
    def test_anomaly_detection(self):
        """Test de d√©tection d'anomalies"""
        print("üß™ Test d√©tection d'anomalies...")
        
        # Lire les logs pendant 60 secondes pour d√©tecter des anomalies
        log_buffer = self.read_serial_until_pattern(r"Anomalie|anomaly", timeout=60)
        
        # Si aucune anomalie d√©tect√©e, c'est normal en fonctionnement normal
        if "Anomalie" not in log_buffer:
            print("‚ÑπÔ∏è Aucune anomalie d√©tect√©e (fonctionnement normal)")
        else:
            # Si anomalie d√©tect√©e, v√©rifier le traitement
            self.assertIn("Anomalie d√©tect√©e", log_buffer)
            print("‚ö†Ô∏è Anomalie d√©tect√©e et trait√©e correctement")
        
        print("‚úÖ D√©tection d'anomalies OK")
    
    def test_runtime_monitoring(self):
        """Test du monitoring en temps r√©el"""
        print("üß™ Test monitoring temps r√©el...")
        
        # V√©rifier que le monitoring tourne
        monitoring_log = self.read_serial_until_pattern(r"V√©rification en temps r√©el", timeout=20)
        
        if "V√©rification en temps r√©el" in monitoring_log:
            self.assertIn("D√©marrage v√©rification en temps r√©el", monitoring_log)
            print("‚úÖ Monitoring temps r√©el actif")
        else:
            print("‚ÑπÔ∏è Monitoring temps r√©el non activ√© dans cette configuration")
    
    def test_performance_metrics(self):
        """Test des m√©triques de performance"""
        print("üß™ Test m√©triques de performance...")
        
        # Collecter les m√©triques pendant 30 secondes
        metrics_log = self.read_serial_until_pattern(r"Heartbeat syst√®me|ms\)", timeout=30)
        
        # Analyser les temps de v√©rification
        timing_matches = re.findall(r"(\d+) ms\)", metrics_log)
        if timing_matches:
            timings = [int(t) for t in timing_matches]
            avg_timing = sum(timings) / len(timings)
            
            # V√©rifier que les performances sont acceptables
            self.assertLess(avg_timing, 1000, "Temps de v√©rification < 1s en moyenne")
            self.assertLess(max(timings), 5000, "Aucune v√©rification > 5s")
            
            print(f"üìä Temps moyen: {avg_timing:.1f}ms, Max: {max(timings)}ms")
        
        print("‚úÖ M√©triques de performance OK")

def run_all_tests():
    """Ex√©cute tous les tests"""
    print("üöÄ D√©marrage des tests SecureIoT-VIF")
    print("=" * 50)
    
    # Cr√©er la suite de tests
    test_suite = unittest.TestLoader().loadTestsFromTestCase(SecureIoTVIFTests)
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # R√©sum√©
    print("=" * 50)
    if result.wasSuccessful():
        print("‚úÖ Tous les tests sont pass√©s avec succ√®s!")
    else:
        print(f"‚ùå {len(result.failures)} tests √©chou√©s, {len(result.errors)} erreurs")
        
        for test, error in result.failures + result.errors:
            print(f"‚ùå {test}: {error}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)